totalinds  = length(population[,1]) + 1 #VariableForUniqueID
alldead    <<- 0
#if plotting switch is on, plot population size
if(runvars$plotit[r]==1){
Na         = runvars$K[r]
Nadults    = c(nrow(population[population[,2]>=runvars$maturity[r],,drop=FALSE]))
plot(-100, -100 , xlab="generation", ylab="population size", xlim=c(0, (runvars$gens[r] + runvars$lifespan[r] + 1)), ylim=c(0, (runvars$K[r]*3)), type="b")
abline(runvars$K[r],0,lty=3, col="grey50")
abline(v=runvars$poorenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$fixedenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$startcap[r], lty=4, col="forestgreen", lwd=2)
abline(v=runvars$endcap[r], lty=4, col="forestgreen", lwd=2)
}
#### Simulate over years ####
for(g in 1:(runvars$gens[r] + runvars$lifespan[r] + 1)){ #(runvars$gens[r] + runvars$lifespan[r] + 1)
#### Determine number of offspring to produce ####
nalive     = nrow(population[population[,9]==1,,drop=FALSE])
nkilled    = nalive - nrow(population[population[,9]==1,,drop=FALSE])
# determine current population size
Nt = CalculateNt(population, runvars$countimmat[r], runvars$maturity[r])
if(is.null(Nt)){
alldead <<- 2
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
# adjust value to compensate for proportion of adults killed before/after head count
Nt = Nt + round(nkilled * runvars$propkill[r])
remove(nalive, nkilled)
# determine future population size/number of offspring needed
n.wild.offspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
#### Wild reproduction ####
#get migrants if it is the correct year
migrants = NULL
if(runvars$nimmigrants[r]>0 & g %% runvars$maturity[r] == 0){
# add migrants for the year - all are mature adults
migrants     = Immigrant(runvars$nimmigrants[r], runvars$maturity[r], runvars$lifespan[r], totalinds, runvars$nloci[r], otherpop, g)
migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
offspring = NULL
parents   = NULL
repros    = population[population[,9] == 1, ,drop=FALSE] # are alive
if(nrow(repros)>2){
repros = repros[repros[,2] >= runvars$maturity[r], ,drop=FALSE]  # are adults
if(nrow(repros)>2){
if(n.wild.offspring>0){
wild.pairs = Pairs(n.offs = n.wild.offspring, runvars$fecundity[r])
offspring  = Repro(repros, wild.pairs, runvars$fecundity[r], runvars$maturity[r], g, runvars$nloci[r], population, totalinds, migrants)
remove(wild.pairs)
# add wild born individuals to IDcount (if there were any)
if(!is.null(nrow(offspring))){
totalinds = totalinds + length(offspring[,1]) + 1
parents   = unique(c(offspring[,3], offspring[,4]))
}
}
}
}
remove(Nt, n.wild.offspring, repros, migrants)
#### Some more death, add new of year ####
# kill adults that die this year, after reproduction
population = AdultMortality(population, g, runvars$adultmort[r], runvars$killimmat[r], runvars$maturity[r], parents, runvars$lifespan[r], runvars$repro1[r], alldead)
# add new of year to object
population = rbind(population, offspring)
remove(parents, offspring)
##### Age and write to file ####
# increase age by 1 year
population = AgeUp(population, alldead)
# determine current population size and plot it
if(runvars$plotit[r]==1){
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
alive   = population[population[,9]==1, ,drop=FALSE]
Nadults = c(Nadults, nrow(alive[alive[,2] >= runvars$maturity[r],,drop=FALSE]))
lines(c(0:g), Na , xlab="generation", ylab="population size", cex = 2, lty = 1, col="black", lwd=5)
lines(c(0:g), Nadults , xlab="generation", ylab="population size", cex = 2, lty = 1, col="blue", lwd=5)
remove(alive)
}
# write info for all dead individuals, then remove all dead from population object
AllDead(alldead, population, runvars$outdir[r], r)
alldead <<- 3
population = population[population[,9]==1,,drop=FALSE]
# look for extinct populations (before immigration makes it no longer extinct)
if(nrow(population[population[,9]==1, ,drop=FALSE])<2){break}
}
r=1
RunModel(runvars, r)
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "other"                                                 #"crane" "tamarin" "toad" "salmon" "other" (parameters values listed below)
#species parameters
if(species=="crane")  { fecundity.V = 1;   maturity.V  = 5;  lifespan.V  = 23; repro1.V = 1; K.V = 500 }   #fecundity - modified by RRS for each pair
if(species=="tamarin"){ fecundity.V = 2;   maturity.V  = 2;  lifespan.V  = 8;  repro1.V = 1; K.V = 500 }   #maturity  - number of years to reach sexual maturity
if(species=="toad")   { fecundity.V = 30;  maturity.V  = 4;  lifespan.V  = 10; repro1.V = 1; K.V = 500 }   #lifespan  - maximum
if(species=="salmon") { fecundity.V = 500; maturity.V  = 4;  lifespan.V  = 7;  repro1.V = 0; K.V = 500 }   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
if(species=="other")  { fecundity.V = 100; maturity.V  = 2;  lifespan.V  = 5;  repro1.V = 0; K.V = 500 }   #K         - values for setting total pop to 250
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 1                                                #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
r=1
RunModel(runvars, r)
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "other"                                                 #"crane" "tamarin" "toad" "salmon" "other" (parameters values listed below)
#species parameters
if(species=="crane")  { fecundity.V = 1;   maturity.V  = 5;  lifespan.V  = 23; repro1.V = 1; K.V = 500 }   #fecundity - modified by RRS for each pair
if(species=="tamarin"){ fecundity.V = 2;   maturity.V  = 2;  lifespan.V  = 8;  repro1.V = 1; K.V = 500 }   #maturity  - number of years to reach sexual maturity
if(species=="toad")   { fecundity.V = 30;  maturity.V  = 4;  lifespan.V  = 10; repro1.V = 1; K.V = 500 }   #lifespan  - maximum
if(species=="salmon") { fecundity.V = 500; maturity.V  = 4;  lifespan.V  = 7;  repro1.V = 0; K.V = 500 }   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
if(species=="other")  { fecundity.V = 100; maturity.V  = 2;  lifespan.V  = 5;  repro1.V = 0; K.V = 500 }   #K         - values for setting total pop to 250
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 10                                                #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
##run model iterating over parameters in Replicates
for(r in 1:nrow(runvars)){
RunModel(runvars, r)
}
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "krat"                                                  #label
fecundity.V = 3                                                   #fecundity - number of offspring
maturity.V  = 1                                                   #maturity  - number of years to reach sexual maturity
lifespan.V  = 3                                                   #lifespan  - maximum
repro1.V    = 1                                                   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
K.V         = 100                                                 #K         - values for setting total pop size
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 0                                               #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
r=1
RunModel(runvars, r)
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "krat"                                                  #label
fecundity.V = 1                                                   #fecundity - number of offspring
maturity.V  = 1                                                   #maturity  - number of years to reach sexual maturity
lifespan.V  = 3                                                   #lifespan  - maximum
repro1.V    = 1                                                   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
K.V         = 100                                                 #K         - values for setting total pop size
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 0                                               #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
r=1
RunModel(runvars, r)
na
Na
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
#### Initialize ####
#set initial age strucutre of population (equal proportion of all ages)
agestage   = data.frame(age = (1:runvars$lifespan[r]), num = rep(runvars$N[r]/(runvars$lifespan[r]*runvars$N[r]), runvars$lifespan[r]))
population = StartingPop(runvars$N[r], agestage, runvars$nloci[r])
otherpop   = StartingPop(10000, agestage, runvars$nloci[r])
otherpop   = otherpop[,11:(runvars$nloci[r]*2+10)]
remove(agestage)
#write starting population to file
write.table(population[0,], paste(runvars$outdir[r], "population_indvs", r, ".csv", sep=""), col.names=TRUE, row.names=FALSE, append=FALSE, sep=",")
#set up variables and ID number counter
totalinds  = length(population[,1]) + 1 #VariableForUniqueID
alldead    <<- 0
#if plotting switch is on, plot population size
if(runvars$plotit[r]==1){
Na         = runvars$K[r]
Nadults    = c(nrow(population[population[,2]>=runvars$maturity[r],,drop=FALSE]))
plot(-100, -100 , xlab="generation", ylab="population size", xlim=c(0, (runvars$gens[r] + runvars$lifespan[r] + 1)), ylim=c(0, (runvars$K[r]*3)), type="b")
abline(runvars$K[r],0,lty=3, col="grey50")
abline(v=runvars$poorenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$fixedenv[r], lty=2, col="darkorange", lwd=2)
}
#### Simulate over years ####
for(g in 1:(runvars$gens[r] + runvars$lifespan[r] + 1)){ #(runvars$gens[r] + runvars$lifespan[r] + 1)
#### Determine number of offspring to produce ####
nalive     = nrow(population[population[,9]==1,,drop=FALSE])
nkilled    = nalive - nrow(population[population[,9]==1,,drop=FALSE])
# determine current population size
Nt = CalculateNt(population, runvars$countimmat[r], runvars$maturity[r])
if(is.null(Nt)){
alldead <<- 2
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
# adjust value to compensate for proportion of adults killed before/after head count
Nt = Nt + round(nkilled * runvars$propkill[r])
remove(nalive, nkilled)
# determine future population size/number of offspring needed
n.wild.offspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
#### Wild reproduction ####
#get migrants if it is the correct year
migrants = NULL
if(runvars$nimmigrants[r]>0 & g %% runvars$maturity[r] == 0){
# add migrants for the year - all are mature adults
migrants     = Immigrant(runvars$nimmigrants[r], runvars$maturity[r], runvars$lifespan[r], totalinds, runvars$nloci[r], otherpop, g)
migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
offspring = NULL
parents   = NULL
repros    = population[population[,9] == 1, ,drop=FALSE] # are alive
if(nrow(repros)>2){
repros = repros[repros[,2] >= runvars$maturity[r], ,drop=FALSE]  # are adults
if(nrow(repros)>2){
if(n.wild.offspring>0){
wild.pairs = Pairs(n.offs = n.wild.offspring, runvars$fecundity[r])
offspring  = Repro(repros, wild.pairs, runvars$fecundity[r], runvars$maturity[r], g, runvars$nloci[r], population, totalinds, migrants)
remove(wild.pairs)
# add wild born individuals to IDcount (if there were any)
if(!is.null(nrow(offspring))){
totalinds = totalinds + length(offspring[,1]) + 1
parents   = unique(c(offspring[,3], offspring[,4]))
}
}
}
}
remove(Nt, n.wild.offspring, repros, migrants)
#### Some more death, add new of year ####
# kill adults that die this year, after reproduction
population = AdultMortality(population, g, runvars$adultmort[r], runvars$killimmat[r], runvars$maturity[r], parents, runvars$lifespan[r], runvars$repro1[r], alldead)
# add new of year to object
population = rbind(population, offspring)
remove(parents, offspring)
##### Age and write to file ####
# increase age by 1 year
population = AgeUp(population, alldead)
# determine current population size and plot it
if(runvars$plotit[r]==1){
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
alive   = population[population[,9]==1, ,drop=FALSE]
Nadults = c(Nadults, nrow(alive[alive[,2] >= runvars$maturity[r],,drop=FALSE]))
lines(c(0:g), Na , xlab="generation", ylab="population size", cex = 2, lty = 1, col="black", lwd=5)
lines(c(0:g), Nadults , xlab="generation", ylab="population size", cex = 2, lty = 1, col="blue", lwd=5)
remove(alive)
}
# write info for all dead individuals, then remove all dead from population object
AllDead(alldead, population, runvars$outdir[r], r)
alldead <<- 3
population = population[population[,9]==1,,drop=FALSE]
# look for extinct populations (before immigration makes it no longer extinct)
if(nrow(population[population[,9]==1, ,drop=FALSE])<2){break}
}
Na
alive
Nadults
migrants
etwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "krat"                                                  #label
fecundity.V = 1                                                   #fecundity - number of offspring
maturity.V  = 1                                                   #maturity  - number of years to reach sexual maturity
lifespan.V  = 3                                                   #lifespan  - maximum
repro1.V    = 1                                                   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
K.V         = 100                                                 #K         - values for setting total pop size
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 10                                               #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "krat"                                                  #label
fecundity.V = 1                                                   #fecundity - number of offspring
maturity.V  = 1                                                   #maturity  - number of years to reach sexual maturity
lifespan.V  = 3                                                   #lifespan  - maximum
repro1.V    = 1                                                   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
K.V         = 100                                                 #K         - values for setting total pop size
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 10                                               #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
r=1
RunModel(runvars, r)
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "krat"                                                  #label
fecundity.V = 10                                                  #fecundity - number of offspring; can be 1, 2, 10, or 100 currently
maturity.V  = 3                                                   #maturity  - number of years to reach sexual maturity
lifespan.V  = 6                                                   #lifespan  - maximum
repro1.V    = 1                                                   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
K.V         = 200                                                 #K         - values for setting total pop size
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.0                                                #proportion of individuals to remove
#other
nimmigrants.V = 3                                                #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
runvars = Replicates(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, directory, outdir, plotit, species)
remove(repeats, K.V, N.V, gens.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V,directory, outdir, plotit, species)
r=1
RunModel(runvars, r)
traceback()
r
#### Initialize ####
#set initial age strucutre of population (equal proportion of all ages)
agestage   = data.frame(age = (1:runvars$lifespan[r]), num = rep(runvars$N[r]/(runvars$lifespan[r]*runvars$N[r]), runvars$lifespan[r]))
population = StartingPop(runvars$N[r], agestage, runvars$nloci[r])
otherpop   = StartingPop(10000, agestage, runvars$nloci[r])
otherpop   = otherpop[,11:(runvars$nloci[r]*2+10)]
remove(agestage)
#write starting population to file
write.table(population[0,], paste(runvars$outdir[r], "population_indvs", r, ".csv", sep=""), col.names=TRUE, row.names=FALSE, append=FALSE, sep=",")
#set up variables and ID number counter
totalinds  = length(population[,1]) + 1 #VariableForUniqueID
alldead    <<- 0
#if plotting switch is on, plot population size
if(runvars$plotit[r]==1){
Na         = runvars$K[r]
Nadults    = c(nrow(population[population[,2]>=runvars$maturity[r],,drop=FALSE]))
plot(-100, -100 , xlab="generation", ylab="population size", xlim=c(0, (runvars$gens[r] + runvars$lifespan[r] + 1)), ylim=c(0, (runvars$K[r]*3)), type="b")
abline(runvars$K[r],0,lty=3, col="grey50")
abline(v=runvars$poorenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$fixedenv[r], lty=2, col="darkorange", lwd=2)
}
g=1
#### Determine number of offspring to produce ####
nalive     = nrow(population[population[,9]==1,,drop=FALSE])
nkilled    = nalive - nrow(population[population[,9]==1,,drop=FALSE])
# determine current population size
Nt = CalculateNt(population, runvars$countimmat[r], runvars$maturity[r])
if(is.null(Nt)){
alldead <<- 2
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
# adjust value to compensate for proportion of adults killed before/after head count
Nt = Nt + round(nkilled * runvars$propkill[r])
remove(nalive, nkilled)
# determine future population size/number of offspring needed
n.wild.offspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
#### Wild reproduction ####
#get migrants if it is the correct year
migrants = NULL
if(runvars$nimmigrants[r]>0 & g %% runvars$maturity[r] == 0){
# add migrants for the year - all are mature adults
migrants     = Immigrant(runvars$nimmigrants[r], runvars$maturity[r], runvars$lifespan[r], totalinds, runvars$nloci[r], otherpop, g)
migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
#adjust number of offspring based on number of migrants
n.wild.offspring  = n.wild.offspring - nrow(migrants)
nrow(migrants)
n.wild.offspring
# determine future population size/number of offspring needed
n.wild.offspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
!is.iull(nrow(migrants))
!is.null(nrow(migrants))
RunModel(runvars, r)
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
setwd("/Users/jannawilloughby/GDrive/Willoughby lab/coal vs fst/migration/")                                                         #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
RunModel(runvars, r)
